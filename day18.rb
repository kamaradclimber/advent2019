#!/usr/bin/env ruby

require 'pry'

def debug(s)
  puts s if ENV['DEBUG']
end

def debug2(s)
  puts s if ENV['DEBUG2']
end

def read_input(input)
  grid = {}
  input.split("\n").each_with_index do |line,y|
    line.chars.each_with_index do |char,x|
      grid[[x,y]] = char
    end
  end
  grid
end

def update_distance(grid, distances, starting_point, forbidden)
  debug "Starting point #{starting_point.join(',')}: #{grid[starting_point]}"
  visited = {}
  grid.each {|p,el| visited[p] = false unless forbidden.include?(el)}
  distances[starting_point] = 0
  while visited.any? { |_,v| !v }
    to_explore = visited
      .reject { |point, v| v }
      .min_by { |point, _| distances[point]}
    x,y = point = to_explore.first
    debug "Visiting #{point.join(',')}"

    [[x-1,y],[x+1,y],[x,y-1],[x,y+1]].each do |candidate|
      next if visited[candidate]
      next if grid[candidate] == '#'
      if forbidden.include?(grid[candidate])
        best_dist = distances.default - 1
      else
        current_dist = distances[candidate]
        best_dist = [current_dist, distances[point] + 1].compact.min
      end
      distances[candidate] = best_dist
      debug "Best distance between #{candidate.join(',')} and #{starting_point.join(',')} is (for now) #{distances[candidate]}"
    end
    remaining_to_explore = distances.select { |point, d| visited[point] == false }
    if remaining_to_explore.empty? || remaining_to_explore.values.min >= distances.default 
      debug "End of reachable points"
      return
    end

    visited[point] = true
  end
end

def find(grid, el)
  grid.find { |p,char| char == el}.first
end

def part1(grid)
  visited_keys = []
  infinity = 1000000000000

  forbidden = ('A'..'Z').to_a + ['#']
  start = find(grid, '@')

  # quicker access to keys location
  key_locations = {}
  grid.each do |point, el|
    key_locations[el] = point if ('a'..'z').include?(el)
  end
  explore(visited_keys: visited_keys.dup, infinity: infinity, start: start, forbidden: forbidden.dup, key_locations: key_locations, grid: grid, best_known_steps: infinity, current_solution_steps: 0)
end

# return [list_of_keys, nb_of_steps] or nil (if no solution has been found)
def explore(visited_keys:, infinity:, start:, forbidden:, key_locations:, grid:, best_known_steps:, current_solution_steps:, depth: 0)
  if current_solution_steps > best_known_steps
    puts "Super early break efficient!"
    return nil
  end
  debug2 "Depth #{depth}"
  distances = Hash.new(infinity)

  debug "Dijkstra computation starting from #{start.join(',')} with #{forbidden.join('')} as forbidden chars"
  update_distance(grid, distances, start, forbidden)

  # find newly keys/doors accessible within reachable paths
  reachable_keys = key_locations.select { |key,point| distances[point] < distances.default && !visited_keys.include?(key)}.keys
  case reachable_keys.size
  when 0
    debug2 "Terminal case"
    return [visited_keys, current_solution_steps]
  else
    #puts("  " * depth + "Several keys are reachable: #{reachable_keys.join(',')}")
    reachable_keys
      .sort_by! { |key| distances[key_locations[key]] }
      .reject! { |key| distances[key_locations[key]] + current_solution_steps > best_known_steps}
    solution = reachable_keys.map do |reached_key|
      inner_visited_keys = visited_keys.dup
      inner_forbidden = forbidden.dup
      #puts("  " * depth + "  Trying #{reached_key}")
      steps = distances[key_locations[reached_key]]
      inner_forbidden -= [reached_key.upcase]
      inner_visited_keys << reached_key
      start = key_locations[reached_key]
      new_keys, steps = explore(visited_keys: inner_visited_keys.dup, infinity: infinity, start: start, forbidden: inner_forbidden.dup, key_locations: key_locations, grid: grid, best_known_steps: best_known_steps, current_solution_steps: steps + current_solution_steps, depth: depth+1)
      if steps
        puts("  " * depth + "  Best solution for #{new_keys.join(',')}: #{steps}")
        best_known_steps = steps
        [new_keys, steps]
      else
        nil
      end
    end.compact.to_h
    new_keys, steps = solution.min_by { |_,v| v }
    if steps && steps <= best_known_steps
      [new_keys, steps]
    else
      nil
    end
  end
end

grid = read_input(<<~EXAMPLE1)
########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################
EXAMPLE1

keys, steps = part1(grid)
puts keys.join(',')
raise "Example1 failed" unless steps == 86

puts '---'
grid = read_input(<<~EXAMPLE)
########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################
EXAMPLE

keys, steps = part1(grid)
puts keys.join(',')
raise "Example2 failed" unless steps == 132


#puts '---'
#grid = read_input(<<~EXAMPLE)
##################
##i.G..c...e..H.p#
#########.########
##j.A..b...f..D.o#
#########@########
##k.E..a...g..B.n#
#########.########
##l.F..d...h..C.m#
##################
#EXAMPLE
#
#keys, steps = part1(grid)
#puts keys.join(',')
#raise "Example3 failed" unless steps == 136

puts '---'
grid = read_input(<<~EXAMPLE)
########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################
EXAMPLE

keys, steps = part1(grid)
puts keys.join(',')
raise "Example4 failed" unless steps == 81

puts '---'
grid = read_input(<<~EXAMPLE)
#################################################################################
#m....#...#...#.....#...#...............#.#...#.....#...........................#
#.###.#.#.#.#.###.#.#.#.#####.#.#########.#.#.#.#.###.###.#.#############.#####.#
#...#...#...#...#.#b#.#.#...#.#........x#.#.#.#.#.....#...#.#.......#.....#...#.#
#.#.###########.#.#.#.#.#.#.###########.#.#.#.#.#######.#####.#####.#######.#.###
#.#.......#...#.U.#...#...#...........#.#.#.#...#.....#..........p#.........#...#
#.#######.#.#.#######################.#.#.#.#####.###.###########.#############.#
#...#...#.#.#.#...#.S...#...........#...#.#.#...#.#.#.....#....k#.....#.......#.#
###.#.#.#.#.#.#.#.#.###.#.###.#####L###.#.#.#.#.#.#.###N###.###.#######.#####.#.#
#...#.#...#.#.#.#...#.#.#...#.#.......#.#.#...#...#.....#...#.#.#.......#...#.#.#
#.###.#####.#.#.#####.#.###.#.#########.#.#########.#####.###.#.#.#######.#.#.#.#
#.#.#.#...#.#.#.#.T...#.....#.........#.#...#.....#...#.#...#.....#.......#.#...#
#.#.#.#.#.#.#.#.#.###.#############.#.#.###.#.#.#####.#.###.#######.#####.#.#####
#.#.#q#.#.H.#.#.#.#...#.....F.#...#.#...#...#.#.....#.#...#...#.#...#.#...#...#.#
#.#.#.###.###.#.###.#.#####.#.#.#.###.###.###.###.#.#.###.###.#.#.###.#.#####.#.#
#...#...#.#...#.#...#.....#.#.#.#...#...#.#...#.#.#.#.#...#...#.......#.#.#...#.#
#######.#.#.###.#.#######.###.#.###.###.#.#.###.#.###.#.###.###########.#.#.###.#
#...J...#.#y....#.W.#...#.....#.#...#.#.#.#.....#.....#.#...#...........#.#.....#
#.#######.#########.#.#.#.#####.#.###.#.#.#####.#######.#.###.#.###.#####.#.#####
#.#...#...#.......#.#.#...#.....#.#.....#.......#.......#.#...#...#.#...#...#...#
#.#.#.#.#######.#V#.###.###.#####.#.#####.#########.#.#.#.#####.#.###.#Z#####.#.#
#.#v#.#.#.....#.#.#.#.#...#.#...#.#.....#.........#.#.#.#...#.#.#.....#.......#.#
#.###R#C#.###.#.#.#.#.#####.###.#.#####.#########.###.#.###.#.#################.#
#.#...#.#.#.#...#w#.#.....#...#...#...#.#.......#.....#...#...#.............#...#
#.#.###.#.#.#####.#.#####.###.#.###.#.#.#.#####.#########.#####.###########.#.#.#
#.#.#...#.#.........#...#.....#.#...#.#.#.A.#...........#...#...#..j......#.G.#.#
#.#.#.###.#.#######.###.#######.#.###.#####.#.#######.#####.#.###.#######.#####.#
#.#..r....#.#.....#.......#...#...#.#...#...#.#...#...#.....#.#...#.....#.......#
#.#######.###D###.#######.#.#.#####.###.#.###.#.#.#.###.#####.#.###.###.#########
#..z....#.#...#.#.....#t....#.#.......#.#...#.#i#.#...#.#.....#.#.....#.....#...#
#.#####.###.###.#####.#######.#######.#.#.#.###.#.#####.###O###.#####.#####.###.#
#.#...#...#.#.#.....#...#...#.......#.#.#.#.#...#.....#.#...#...#...#...#.......#
#.###.###.#.#.#.###.###.###.#.#####.#.#.###.#.#######.#.#.###.###.#.###.#######.#
#.....#.#.#.#.....#...#...#...#...#..f#.#...#.#.....#...#...#.....#...#...#...#.#
#####.#.#.#.#.#######.###.#####.#.#####.#.###.###.#.#######.#########.#.#.#.#.#.#
#...#.#.#...#...#.....#...#.....#.....#.#...#...#.#.#.......#...#.....#.#.#.#.#.#
#.#.#.#.#######.#.###.#.#.#.#########.#.#.#.###.#.#.#.#######.#.#.#######.#.#.#.#
#.#.#...#.....#.#.#...#.#.#.....#.#...#.#.#...#.#.#.#.#.....#.#...#.....#...#.#.#
#.#.###.###.#.###.#.###.#######.#.#.###.#.###.#.#.#.#.#.#####.#######.#.#####.#.#
#.#.........#.....#...#...........#.........#.....#...#...............#.......#.#
#######################################.@.#######################################
#.....#.........#.............#.#...................#.......#.......#.....#.....#
#.#.#.#.#######.#.###########.#.#.#.#####.###########.###.#.#.#####.#.###.#.###.#
#.#.#.#.#.....#.#.#.......#...#...#.#...#.......#...#.#.#.#.#.#...#.....#.#.#.#.#
#.#.#.#.#.###.#.#.###.#.###.###.###.#.#.#.#####.#.#.#.#.#.#.###.#.#######.#.#.#.#
#.#.#...#...#.#.#...#.#.#...#...#.#...#.#.#...#...#.....#.#.....#.......#.....#.#
###.#####.#.###.#.#.###.#.###.###.#####.#.#.#.###########.#############.#######.#
#...#.#...#.....#.#...#...#...#.......#.#...#.......#.....#.............#...#...#
#.###.#.#########.###.#.###.#########.#.###.#####.###.#########.#######.#.#.#.###
#.#.......#.....#...#.#.#.......#...#.#.#a..#...#.#...#.......#.#.....#d..#.#...#
#.#######.###.#.#.###.#.#######.#.#.#.#.#####.#.###.###.#####.#.#.###Y#####.#.#.#
#...#...#.....#.#.#...#.....I.#...#...#.#...#.#.....#...#.#...#.#.#...#...#.#.#.#
###.#.#.#######.###.#########.#########.#.#.#.#####.#.###.#.###.#.#.#####.#.###.#
#.#...#...#.........#.......#...........#.#.#.#.....#.#...#.#...#h#.#.....#.....#
#.#######.###########.#################.#.#.#.#######.#.#.#.#####.#.#.#########.#
#...#...#.....#...#.......#.......#.....#.#.#.....#...#.#.#.#.....#.#.#.......#.#
#.#.###.#####.#.#.#.#####.#.#.#####.#####.#.#####.#.###.#.#.#.#####.#.#.###.###.#
#.#.....#.#...#.#...#...#g#.#...#...#...#.#.#.....#.#...#.#.#.#...#.#.#...#.....#
#.#####.#.#.#########.#.#.#.###.#.###.#.#.#.#.###.#.#####.#.#.#.#.#.#.###.#######
#.#.....#.#...........#.#.#...#.#...#.#.#.#.#.#...#.....#.#.#.#.#.#.#...#...#...#
#.#.#####.#############.#.###.#.###.#.#.#.#.#.###.#####.#.#.#.#.###.#.#####.#.#.#
#.#...#.....#.#.....#...#...#.#o....#.#.#.#.#...#.#.....#.#.#c#...K.#.#.....#.#.#
#.###E#.###.#.#.###.#####.#.#.#########.#.#.###.#.#.#####.#.###.#####.#.#####.###
#.#...#...#.#.#...#...#...#...#.#.....#.#.#.....#.#.......#...#.....#.#.#...#...#
#.###.###.#.#.###.###.#.#######.#.#.#.#.#.#######.#######.#.#######.#.#.#.###.#.#
#...#.....#...#.#.#.#...#.....#...#.#...#.#.......#.....#.#...#.....#.#.#.....#.#
###.#.#######.#.#.#.#####.#.###.###.###.#.#.###########.#.###.#.#####.#.#######.#
#...#.#...#.....#.#..s#...#.....#...#.#.#.#.#.....#.....#.#.#...#.....#.....#...#
#.#.###.#.#####.#.###.#.#########.###.#.#.#.###.#.#.###.#.#.#####.#.#######.#.###
#.#.#...#.....#.#.#...#...#...#...#...#.#.#.....#...#...#...#...#.#.....#...#...#
#.###.#######.###.#.#.###.#.#.#.###.#.#.#.###########.#####.#.###.###M###.#####.#
#.#...#.....#.....#.#...#...#.#.#...#.#.#.#...........#.....#.....#.#...#.......#
#.#.#######.#######.#######.###.#.#.###.#.###########.#.#####.#####.###.#######.#
#.#.......#.#.....#...#.....#...#.#.#...#.......#...#.#.....#...#.....#.......#.#
#.#######.#.#.#.#.###.#.#####B###.###.###.#####.#.#.#######.###.#####.###.#####.#
#...#...#.#...#.#...#..l#...#...#...#.#.#.#...#.#.#.#.....#...#.#.....#...#...#.#
#.#.#.#.#.#.###.###.#.###.#.###.###.#P#.#.#.#Q#.#.#.#.###.###.#.#.###.#.###.#.#.#
#.#.#.#.#.#.#...#.#.#.#...#.....#...#...#...#.#.#.#.#...#...#.#...#...#...#.#...#
#.#.#.#.#.###.###.#.###.#########.#####.#####.#.#.#.###.###.#.#####.#####.#.#####
#.#...#.......#........u#.......X.......#.....#..n#.......#...#....e....#.......#
#################################################################################
EXAMPLE

ENV['DEBUG2'] = ''
puts "Computing first part"
keys, steps = part1(grid)
puts keys.join(',')
puts "First part: #{steps}"
